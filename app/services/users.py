from outline_vpn import OutlineServerErrorException
from datetime import date

from app.services.outline import create_new_outline_key
from app.database.requests import add_key_to_db, get_user_info_from_db, set_admin
from app.utils.config import config


KEY_PRICE = 100


async def create_new_key(user_id: int) -> str:
    try:
        key = await create_new_outline_key()
        key_id = key.key_id
        access_url = key.access_url
        await add_key_to_db(key_id, access_url, user_id)
        return (f"–í–æ—Ç —Ç–≤–æ–π –Ω–æ–≤—ã–π –∫–ª—é—á üîë\n\n`{access_url}`\n\n–°–∫–æ–ø–∏—Ä—É–π, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ, –∏ –¥–æ–±–∞–≤—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline"
                f"\n\nüí∞ –ù–µ –∑–∞–±—É–¥—å –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ")
    except OutlineServerErrorException:
        return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á\. –û–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"


async def check_payment_date(user_id: int) -> str:
    user_info = await get_user_info_from_db(user_id)
    quantity_of_keys = len(user_info.keys)
    str_payment_date = date.fromordinal(user_info.payment_date)
    delta = (str_payment_date - date.today()).days
    str_payment_date = str_payment_date.strftime('%d.%m.%Y')
    renewal_cost_text = f"\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü: {KEY_PRICE * quantity_of_keys}‚ÇΩ"
    if delta < 0:
        return f"–ù—É –∫–∞–∫ —Ç–∞–º —Å –¥–µ–Ω—å–≥–∞–º–∏? –û–ø–ª–∞—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –µ—â–µ {str_payment_date} ü§∑üèª‚Äç‚ôÇÔ∏è" + renewal_cost_text
    elif delta < 7:
        return (f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é \({str_payment_date}\). "
                f"–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–¥–ª–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å üòâ") + renewal_cost_text
    else:
        return f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è {str_payment_date}. –ü–æ–∫–∞ –º–æ–∂–µ—à—å –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è üï∫üèª"


async def get_all_keys(user_id: int) -> str:
    user_info = await get_user_info_from_db(user_id)
    msg = "üîë –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫–ª—é—á–µ–π:"
    for key in user_info.keys:
        key_id, access_url = key
        msg += f"\n\n{key_id}: `{access_url}`"
    return msg


async def make_new_admin(user_id: int, password: str) -> str:
    if password == config.admin_password:
        await set_admin(user_id)
        return "üõ† –¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    else:
        return "üõ† –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
